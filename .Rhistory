df = fread(feature_dir)
df_original = df
label = fread(label_dir)
#remove unwanted features and standardize data
df <- df[complete.cases(df), ]
pids <- df %>% dplyr::select(patientunitstayid)
df <- BBmisc::normalize(df[,-1], method = "standardize", range = c(0, 1))
df <- cbind(pids, df)
#combine labels if separate
df <- merge(label, df, by = "patientunitstayid")
#turn label into binary 0, 1
df$label <- as.character(df$label)
df$label <- (df$label == outcomes[1]) * 1
#split into training and testing for LM
set.seed(1206)
intrain <- createDataPartition(y = df$label, p = 0.80, list = FALSE)
training <- df[intrain,]
train_pids <- training %>%  dplyr::select(patientunitstayid)
training <- training[,-1]
testing <- df[-intrain,]
test_pids <- testing %>%  dplyr::select(patientunitstayid)
testing <- testing[,-1]
#first step to reduce feature number. If too large of a dimension, can't compute VIF.
#lets first do a correlation analysis to remove highly correlated variables first.
#
training <- Filter(function(x) sd(x) != 0, training)
correlationMatrix <- cor(training)
# print(correlationMatrix)
# heatmap(correlationMatrix, keep.dendro = F)
highlyCorrelated <- caret::findCorrelation(correlationMatrix, cutoff=0.90, exact = T, names = T)
# print(highlyCorrelated)
training <- training %>% select(-all_of(highlyCorrelated))
######  FIRST PASS TO REMOVE ALIAS (DEPENDENT VARIABLES) ######
# Build the linear model
model1 <- lm(label ~., data = training)
# Make predictions
predictions <- model1 %>% predict(testing)
# Model performance
RMSE = RMSE(predictions, testing$label)
R2 = R2(predictions, testing$label)
####VIF analysis dataframe to store iteration.
VIF_analysis <- as.data.frame(matrix(ncol = 5))
colnames(VIF_analysis) <- c("RMSE", "R2", "num_features", "removed_feature", "VIF_removed")
VIF_analysis$RMSE[1] <- RMSE
VIF_analysis$R2[1] <- R2
VIF_analysis$num_features[1] <- ncol(training) - 1
VIF_analysis$removed_feature[1] <- NA
# #compute alias of features in model.
alias_ <- alias(model1)
model1_alias <- alias_$Complete
if (!is_empty(model1_alias)) {
alias_names <- names(rowSums(model1_alias))
#remove alias features from training data for the next iterations.
training2 <- training[, -which(colnames(training) %in% alias_names)]
# training2 <- training
vif_features <- training2
} else {
vif_features <- training
}
vif_features$label <- as.factor(vif_features$label)
vif_features$label <- NULL
vif_features <- cbind(train_pids, vif_features)
vif_features <- merge(label, vif_features, by = "patientunitstayid")
vif_features$label = as.character(vif_features$label)
vif_features$label[which(vif_features$label == outcomes[1])] = "class_1"
vif_features$label[which(vif_features$label == outcomes[0])] = "class_0"
VIF_names <- as.data.frame(colnames(vif_features)[-1])
VIF_names[,1] <- as.character(VIF_names[,1])
VIF_names$order <- 1
VIF_names$category <- "none"
colnames(VIF_names)[1] <- "x"
ordering <- unique(VIF_names$order)
threshold <- relative_like_threshold
current_selected <- c()
main_AIC <- rbind()
for (i in 1:length(ordering)) {
print(i)
temp_names <- VIF_names[which(VIF_names$order == i), ]
temp_names <- temp_names[-which(temp_names$x == "label"), ]
# temp_features <- vif_features %>% select("label", temp_names$x)
temp_names_upper <- temp_names
while (nrow(temp_names_upper) != 0) {
temp_names <- temp_names_upper
AIC1 <- rbind()
while (nrow(temp_names) != 0) {
# print(nrow(temp_names))
# print(temp_names)
if (temp_names$category[1] != "none") {
variables <- c(temp_names$x[which(temp_names$category == temp_names$category[1])], current_selected)
temp_features <- vif_features[, which(colnames(vif_features) %in% c("label", variables)), drop = F]
temp_names <- temp_names[-which(temp_names$x %in% variables), , drop = F]
} else {
variables <- c(temp_names$x[1], current_selected)
temp_features <- vif_features[, which(colnames(vif_features) %in% c("label", variables)), drop = F]
temp_names <- temp_names[-which(temp_names$x %in% variables), , drop = F]
}
# print(variables)
temp_features$label = as.factor(temp_features$label)
control = trainControl(method="repeatedcv",
number=10,
repeats=1,
summaryFunction = twoClassSummary,
classProbs = T,
savePredictions = T)
modelGlm <- caret::train(label~., data = temp_features, method="glm", metric = "ROC", trControl = control)
tempAIC <- data.frame("variables" = paste(variables, collapse = ","), "aic" = modelGlm$finalModel$aic, "auc" = modelGlm$results$ROC)
AIC1 <- rbind(AIC1, tempAIC)
AIC1$variables <- as.character(AIC1$variables)
}
temp_selected <- c(as.character(AIC1$variables[which.min(AIC1$aic)]))
raw_selected <- temp_selected
if (temp_selected %like% ",") {
# print("has multiple features")
temp_selected <- strsplit(temp_selected, ",")[[1]]
}
selected_AIC <- AIC1[which(AIC1$variables %in% raw_selected), ]
## evaluate AIC ##
if (!is.null(main_AIC)) {
prior_selected_AIC.value <- main_AIC$aic[nrow(main_AIC)]
selected_AIC.value <- selected_AIC$aic
rel_likelihood <- exp((prior_selected_AIC.value - selected_AIC.value)/2)
} else {
rel_likelihood <- threshold + 1
}
if (rel_likelihood > threshold) {
selected_AIC$rel_like <- rel_likelihood
current_selected <- unique(c(current_selected, temp_selected))
temp_names_upper <- temp_names_upper[-which(temp_names_upper$x %in% temp_selected), ]
print(selected_AIC)
main_AIC <- rbind(main_AIC, selected_AIC)
} else {
temp_names_upper <- temp_names_upper[-which(temp_names_upper$x %in% temp_names_upper$x), ]
print("below threshold - exited")
}
}
print("observe current_selected and main_AIC")
}
current_selected_df = as.data.frame(current_selected, stringsAsFactors = F)
colnames(current_selected_df) = "features"
write.csv(current_selected_df, paste0(save_dir, "FS_selected_features_names.csv"), row.names = F)
write.csv(main_AIC, paste0(save_dir, "FS_info.csv"), row.names = F)
jpeg(file= paste0(save_dir, "/AIC_plot.jpeg"))
plot(seq(1, nrow(main_AIC)), main_AIC$aic, 'l', xlab = "feature #", ylab = "AIC", main = paste0("Forward Selection AIC: threshold > ", relative_like_threshold))
points(seq(1, nrow(main_AIC)), main_AIC$aic)
dev.off()
jpeg(file= paste0(save_dir, "/AUROC_plot.jpeg"))
plot(seq(1, nrow(main_AIC)), main_AIC$auc, 'l', xlab = "feature #", ylab = "AUROC", main = "Forward Selection AUROC: threshold > 0.5")
points(seq(1, nrow(main_AIC)), main_AIC$auc)
dev.off()
jpeg(file= paste0(save_dir, "/relative_likelihood_plot.jpeg"))
plot(seq(1, nrow(main_AIC[-2,])), main_AIC$rel_like[-2], 'l', xlab = "feature #", ylab = "AUROC", main = "Forward Selection rel_like: threshold > 0.5")
# ylim = c(0.1, 10))
points(seq(1, nrow(main_AIC[-2,])), main_AIC$rel_like[-2])
dev.off()
df_original =  df_original[, which(colnames(df_original) %in% c("patientunitstayid", var_list))]
write.csv(df_original, paste0(save_dir, "FS_feature_space.csv"), row.names = F)
}
forward_selection <- function(feature_dir,
label_dir,
outcomes,
experiment_name,
relative_like_threshold,
save_dir) {
save_dir = paste0(save_dir, "/", experiment_name, "_FS_results/")
print(save_dir)
dir.create(save_dir)
df = fread(feature_dir)
df_original = df
label = fread(label_dir)
#remove unwanted features and standardize data
df <- df[complete.cases(df), ]
pids <- df %>% dplyr::select(patientunitstayid)
df <- BBmisc::normalize(df[,-1], method = "standardize", range = c(0, 1))
df <- cbind(pids, df)
#combine labels if separate
df <- merge(label, df, by = "patientunitstayid")
#turn label into binary 0, 1
df$label <- as.character(df$label)
df$label <- (df$label == outcomes[1]) * 1
#split into training and testing for LM
set.seed(1206)
intrain <- createDataPartition(y = df$label, p = 0.80, list = FALSE)
training <- df[intrain,]
train_pids <- training %>%  dplyr::select(patientunitstayid)
training <- training[,-1]
testing <- df[-intrain,]
test_pids <- testing %>%  dplyr::select(patientunitstayid)
testing <- testing[,-1]
#first step to reduce feature number. If too large of a dimension, can't compute VIF.
#lets first do a correlation analysis to remove highly correlated variables first.
#
training <- Filter(function(x) sd(x) != 0, training)
correlationMatrix <- cor(training)
# print(correlationMatrix)
# heatmap(correlationMatrix, keep.dendro = F)
highlyCorrelated <- caret::findCorrelation(correlationMatrix, cutoff=0.90, exact = T, names = T)
# print(highlyCorrelated)
training <- training %>% select(-all_of(highlyCorrelated))
######  FIRST PASS TO REMOVE ALIAS (DEPENDENT VARIABLES) ######
# Build the linear model
model1 <- lm(label ~., data = training)
# Make predictions
predictions <- model1 %>% predict(testing)
# Model performance
RMSE = RMSE(predictions, testing$label)
R2 = R2(predictions, testing$label)
####VIF analysis dataframe to store iteration.
VIF_analysis <- as.data.frame(matrix(ncol = 5))
colnames(VIF_analysis) <- c("RMSE", "R2", "num_features", "removed_feature", "VIF_removed")
VIF_analysis$RMSE[1] <- RMSE
VIF_analysis$R2[1] <- R2
VIF_analysis$num_features[1] <- ncol(training) - 1
VIF_analysis$removed_feature[1] <- NA
# #compute alias of features in model.
alias_ <- alias(model1)
model1_alias <- alias_$Complete
if (!is_empty(model1_alias)) {
alias_names <- names(rowSums(model1_alias))
#remove alias features from training data for the next iterations.
training2 <- training[, -which(colnames(training) %in% alias_names)]
# training2 <- training
vif_features <- training2
} else {
vif_features <- training
}
vif_features$label <- as.factor(vif_features$label)
vif_features$label <- NULL
vif_features <- cbind(train_pids, vif_features)
vif_features <- merge(label, vif_features, by = "patientunitstayid")
vif_features$label = as.character(vif_features$label)
vif_features$label[which(vif_features$label == outcomes[1])] = "class_1"
vif_features$label[which(vif_features$label == outcomes[0])] = "class_0"
VIF_names <- as.data.frame(colnames(vif_features)[-1])
VIF_names[,1] <- as.character(VIF_names[,1])
VIF_names$order <- 1
VIF_names$category <- "none"
colnames(VIF_names)[1] <- "x"
ordering <- unique(VIF_names$order)
threshold <- relative_like_threshold
current_selected <- c()
main_AIC <- rbind()
for (i in 1:length(ordering)) {
print(i)
temp_names <- VIF_names[which(VIF_names$order == i), ]
temp_names <- temp_names[-which(temp_names$x == "label"), ]
# temp_features <- vif_features %>% select("label", temp_names$x)
temp_names_upper <- temp_names
while (nrow(temp_names_upper) != 0) {
temp_names <- temp_names_upper
AIC1 <- rbind()
while (nrow(temp_names) != 0) {
# print(nrow(temp_names))
# print(temp_names)
if (temp_names$category[1] != "none") {
variables <- c(temp_names$x[which(temp_names$category == temp_names$category[1])], current_selected)
temp_features <- vif_features[, which(colnames(vif_features) %in% c("label", variables)), drop = F]
temp_names <- temp_names[-which(temp_names$x %in% variables), , drop = F]
} else {
variables <- c(temp_names$x[1], current_selected)
temp_features <- vif_features[, which(colnames(vif_features) %in% c("label", variables)), drop = F]
temp_names <- temp_names[-which(temp_names$x %in% variables), , drop = F]
}
# print(variables)
temp_features$label = as.factor(temp_features$label)
control = trainControl(method="repeatedcv",
number=10,
repeats=1,
summaryFunction = twoClassSummary,
classProbs = T,
savePredictions = T)
modelGlm <- caret::train(label~., data = temp_features, method="glm", metric = "ROC", trControl = control)
tempAIC <- data.frame("variables" = paste(variables, collapse = ","), "aic" = modelGlm$finalModel$aic, "auc" = modelGlm$results$ROC)
AIC1 <- rbind(AIC1, tempAIC)
AIC1$variables <- as.character(AIC1$variables)
}
temp_selected <- c(as.character(AIC1$variables[which.min(AIC1$aic)]))
raw_selected <- temp_selected
if (temp_selected %like% ",") {
# print("has multiple features")
temp_selected <- strsplit(temp_selected, ",")[[1]]
}
selected_AIC <- AIC1[which(AIC1$variables %in% raw_selected), ]
## evaluate AIC ##
if (!is.null(main_AIC)) {
prior_selected_AIC.value <- main_AIC$aic[nrow(main_AIC)]
selected_AIC.value <- selected_AIC$aic
rel_likelihood <- exp((prior_selected_AIC.value - selected_AIC.value)/2)
} else {
rel_likelihood <- threshold + 1
}
if (rel_likelihood > threshold) {
selected_AIC$rel_like <- rel_likelihood
current_selected <- unique(c(current_selected, temp_selected))
temp_names_upper <- temp_names_upper[-which(temp_names_upper$x %in% temp_selected), ]
print(selected_AIC)
main_AIC <- rbind(main_AIC, selected_AIC)
} else {
temp_names_upper <- temp_names_upper[-which(temp_names_upper$x %in% temp_names_upper$x), ]
print("below threshold - exited")
}
}
print("observe current_selected and main_AIC")
}
current_selected_df = as.data.frame(current_selected, stringsAsFactors = F)
colnames(current_selected_df) = "features"
write.csv(current_selected_df, paste0(save_dir, "FS_selected_features_names.csv"), row.names = F)
write.csv(main_AIC, paste0(save_dir, "FS_info.csv"), row.names = F)
jpeg(file= paste0(save_dir, "/AIC_plot.jpeg"))
plot(seq(1, nrow(main_AIC)), main_AIC$aic, 'l', xlab = "feature #", ylab = "AIC", main = paste0("Forward Selection AIC: threshold > ", relative_like_threshold))
points(seq(1, nrow(main_AIC)), main_AIC$aic)
dev.off()
jpeg(file= paste0(save_dir, "/AUROC_plot.jpeg"))
plot(seq(1, nrow(main_AIC)), main_AIC$auc, 'l', xlab = "feature #", ylab = "AUROC", main = "Forward Selection AUROC: threshold > 0.5")
points(seq(1, nrow(main_AIC)), main_AIC$auc)
dev.off()
jpeg(file= paste0(save_dir, "/relative_likelihood_plot.jpeg"))
plot(seq(1, nrow(main_AIC[-2,])), main_AIC$rel_like[-2], 'l', xlab = "feature #", ylab = "AUROC", main = "Forward Selection rel_like: threshold > 0.5")
# ylim = c(0.1, 10))
points(seq(1, nrow(main_AIC[-2,])), main_AIC$rel_like[-2])
dev.off()
df_original =  df_original[, which(colnames(df_original) %in% c("patientunitstayid", var_list))]
write.csv(df_original, paste0(save_dir, "FS_feature_space.csv"), row.names = F)
}
forward_selection(feature_dir = "/storage/eICU/eICU_feature_extract/eICU_featurization/test_data/test_feature_space_4VIF.csv",
label_dir = "/storage/eICU/eICU_feature_extract/eICU_featurization/test_data/test_label.csv",
outcomes =  c("Expired", "Alive"),
relative_like_threshold = 1,
save_dir = "~/Downloads/",
experiment_name = "same_name"
)
feature_dir = "/storage/eICU/eICU_feature_extract/eICU_featurization/test_data/test_feature_space_4VIF.csv"
label_dir = "/storage/eICU/eICU_feature_extract/eICU_featurization/test_data/test_label.csv"
outcomes =  c("Expired", "Alive")
relative_like_threshold = 1
save_dir = "~/Downloads/"
experiment_name = "same_name"
save_dir = paste0(save_dir, "/", experiment_name, "_FS_results/")
print(save_dir)
dir.create(save_dir)
df = fread(feature_dir)
df_original = df
label = fread(label_dir)
#remove unwanted features and standardize data
df <- df[complete.cases(df), ]
pids <- df %>% dplyr::select(patientunitstayid)
df <- BBmisc::normalize(df[,-1], method = "standardize", range = c(0, 1))
df <- cbind(pids, df)
#combine labels if separate
df <- merge(label, df, by = "patientunitstayid")
#turn label into binary 0, 1
df$label <- as.character(df$label)
df$label <- (df$label == outcomes[1]) * 1
#split into training and testing for LM
set.seed(1206)
intrain <- createDataPartition(y = df$label, p = 0.80, list = FALSE)
training <- df[intrain,]
train_pids <- training %>%  dplyr::select(patientunitstayid)
training <- training[,-1]
testing <- df[-intrain,]
test_pids <- testing %>%  dplyr::select(patientunitstayid)
testing <- testing[,-1]
#first step to reduce feature number. If too large of a dimension, can't compute VIF.
#lets first do a correlation analysis to remove highly correlated variables first.
#
training <- Filter(function(x) sd(x) != 0, training)
correlationMatrix <- cor(training)
# print(correlationMatrix)
# heatmap(correlationMatrix, keep.dendro = F)
highlyCorrelated <- caret::findCorrelation(correlationMatrix, cutoff=0.90, exact = T, names = T)
training <- training %>% select(-all_of(highlyCorrelated))
######  FIRST PASS TO REMOVE ALIAS (DEPENDENT VARIABLES) ######
# Build the linear model
model1 <- lm(label ~., data = training)
# Make predictions
predictions <- model1 %>% predict(testing)
# Model performance
RMSE = RMSE(predictions, testing$label)
R2 = R2(predictions, testing$label)
####VIF analysis dataframe to store iteration.
VIF_analysis <- as.data.frame(matrix(ncol = 5))
colnames(VIF_analysis) <- c("RMSE", "R2", "num_features", "removed_feature", "VIF_removed")
VIF_analysis$RMSE[1] <- RMSE
VIF_analysis$R2[1] <- R2
VIF_analysis$num_features[1] <- ncol(training) - 1
VIF_analysis$removed_feature[1] <- NA
# #compute alias of features in model.
alias_ <- alias(model1)
model1_alias <- alias_$Complete
if (!is_empty(model1_alias)) {
alias_names <- names(rowSums(model1_alias))
#remove alias features from training data for the next iterations.
training2 <- training[, -which(colnames(training) %in% alias_names)]
# training2 <- training
vif_features <- training2
} else {
vif_features <- training
}
vif_features$label <- as.factor(vif_features$label)
vif_features$label <- NULL
vif_features <- cbind(train_pids, vif_features)
vif_features <- merge(label, vif_features, by = "patientunitstayid")
vif_features$label = as.character(vif_features$label)
vif_features$label[which(vif_features$label == outcomes[1])] = "class_1"
vif_features$label[which(vif_features$label == outcomes[0])] = "class_0"
VIF_names <- as.data.frame(colnames(vif_features)[-1])
VIF_names[,1] <- as.character(VIF_names[,1])
VIF_names$order <- 1
VIF_names$category <- "none"
colnames(VIF_names)[1] <- "x"
ordering <- unique(VIF_names$order)
threshold <- relative_like_threshold
current_selected <- c()
main_AIC <- rbind()
for (i in 1:length(ordering)) {
print(i)
temp_names <- VIF_names[which(VIF_names$order == i), ]
temp_names <- temp_names[-which(temp_names$x == "label"), ]
# temp_features <- vif_features %>% select("label", temp_names$x)
temp_names_upper <- temp_names
while (nrow(temp_names_upper) != 0) {
temp_names <- temp_names_upper
AIC1 <- rbind()
while (nrow(temp_names) != 0) {
# print(nrow(temp_names))
# print(temp_names)
if (temp_names$category[1] != "none") {
variables <- c(temp_names$x[which(temp_names$category == temp_names$category[1])], current_selected)
temp_features <- vif_features[, which(colnames(vif_features) %in% c("label", variables)), drop = F]
temp_names <- temp_names[-which(temp_names$x %in% variables), , drop = F]
} else {
variables <- c(temp_names$x[1], current_selected)
temp_features <- vif_features[, which(colnames(vif_features) %in% c("label", variables)), drop = F]
temp_names <- temp_names[-which(temp_names$x %in% variables), , drop = F]
}
# print(variables)
temp_features$label = as.factor(temp_features$label)
control = trainControl(method="repeatedcv",
number=10,
repeats=1,
summaryFunction = twoClassSummary,
classProbs = T,
savePredictions = T)
modelGlm <- caret::train(label~., data = temp_features, method="glm", metric = "ROC", trControl = control)
tempAIC <- data.frame("variables" = paste(variables, collapse = ","), "aic" = modelGlm$finalModel$aic, "auc" = modelGlm$results$ROC)
AIC1 <- rbind(AIC1, tempAIC)
AIC1$variables <- as.character(AIC1$variables)
}
temp_selected <- c(as.character(AIC1$variables[which.min(AIC1$aic)]))
raw_selected <- temp_selected
if (temp_selected %like% ",") {
# print("has multiple features")
temp_selected <- strsplit(temp_selected, ",")[[1]]
}
selected_AIC <- AIC1[which(AIC1$variables %in% raw_selected), ]
## evaluate AIC ##
if (!is.null(main_AIC)) {
prior_selected_AIC.value <- main_AIC$aic[nrow(main_AIC)]
selected_AIC.value <- selected_AIC$aic
rel_likelihood <- exp((prior_selected_AIC.value - selected_AIC.value)/2)
} else {
rel_likelihood <- threshold + 1
}
if (rel_likelihood > threshold) {
selected_AIC$rel_like <- rel_likelihood
current_selected <- unique(c(current_selected, temp_selected))
temp_names_upper <- temp_names_upper[-which(temp_names_upper$x %in% temp_selected), ]
print(selected_AIC)
main_AIC <- rbind(main_AIC, selected_AIC)
} else {
temp_names_upper <- temp_names_upper[-which(temp_names_upper$x %in% temp_names_upper$x), ]
print("below threshold - exited")
}
}
print("observe current_selected and main_AIC")
}
print(i)
temp_names <- VIF_names[which(VIF_names$order == i), ]
temp_names <- temp_names[-which(temp_names$x == "label"), ]
# temp_features <- vif_features %>% select("label", temp_names$x)
temp_names_upper <- temp_names
temp_names <- temp_names_upper
AIC1 <- rbind()
if (temp_names$category[1] != "none") {
variables <- c(temp_names$x[which(temp_names$category == temp_names$category[1])], current_selected)
temp_features <- vif_features[, which(colnames(vif_features) %in% c("label", variables)), drop = F]
temp_names <- temp_names[-which(temp_names$x %in% variables), , drop = F]
} else {
variables <- c(temp_names$x[1], current_selected)
temp_features <- vif_features[, which(colnames(vif_features) %in% c("label", variables)), drop = F]
temp_names <- temp_names[-which(temp_names$x %in% variables), , drop = F]
}
View(temp_names)
variables <- c(temp_names$x[1], current_selected)
temp_features <- vif_features[, which(colnames(vif_features) %in% c("label", variables)), drop = F]
vif_features[, which(colnames(vif_features) %in% c("label", variables))]
vif_features[, which(colnames(vif_features) %in% c("label", variables))]
colnames(vif_features)
temp_features <- vif_features[, which(colnames(vif_features) %in% c("label", variables)), drop = F]
variables <- c(temp_names$x[1], current_selected)
subset_variables <- c("label", variables)
temp_features <- vif_features[, which(colnames(vif_features) %in% subset_variables)), drop = F]
temp_features <- vif_features[, which(colnames(vif_features) %in% subset_variables), drop = F]
which(colnames(vif_features) %in% subset_variables)
temp_features <- vif_features[, (which(colnames(vif_features) %in% subset_variables)), drop = F]
temp_features <- vif_features[, (which(colnames(vif_features) %in% subset_variables))]
which(colnames(vif_features) %in% subset_variables)
vif_features[, which(colnames(vif_features) %in% subset_variables), drop = F]
temp_features <- vif_features[, c(which(colnames(vif_features) %in% subset_variables)), drop = F]
temp_names <- temp_names[-which(temp_names$x %in% variables), , drop = F]
temp_features <- vif_features[, c(which(colnames(vif_features) %in% subset_variables)), drop = F]
# print(variables)
temp_features$label = as.factor(temp_features$label)
